import * as pulumi from "@pulumi/pulumi";
import * as resources from "@pulumi/azure-native/resources";
import * as storage from "@pulumi/azure-native/storage";
import * as sql from "@pulumi/azure-native/sql";
import * as random from "@pulumi/random";

const name = "vulnerability"
// Create an Azure Resource Group
const resourceGroup = new resources.ResourceGroup(`${name}-rg`);

// Create an Azure resource (Storage Account)
const storageAccount = new storage.StorageAccount(`${name}sa`, {
    resourceGroupName: resourceGroup.name,
    sku: {
        name: storage.SkuName.Standard_LRS,
    },
    kind: storage.Kind.StorageV2,
}, {parent: resourceGroup });

// Export the primary key of the Storage Account
const storageAccountKeys = pulumi.all([resourceGroup.name, storageAccount.name]).apply(([resourceGroupName, accountName]) =>
    storage.listStorageAccountKeys({ resourceGroupName, accountName }));
export const primaryStorageKey = storageAccountKeys.keys[0].value;

// Create random password for sql admin
const sqlpassword = new random.RandomPassword(`${name}-sqlseverpassword`, {
    length: 16,
    minLower: 4,
    minUpper: 4, 
    number: true,
    minNumeric: 4,
    special: false,
    });

// create sql admin user
const username = "pulumiadmin";

// create an Azure sql server
const sqlServer = new sql.Server(`${name}-sqlserver`, {
    resourceGroupName: resourceGroup.name,
    administratorLogin: username,
    administratorLoginPassword: sqlpassword.result,
    version: "12.0",
}, {parent: resourceGroup });


// Create an Azure blob container
const myContainer = new storage.BlobContainer(`${name}-blobcontainer`, {
    resourceGroupName: resourceGroup.name,
    accountName: storageAccount.name,
});

export const storagecontainerpath = pulumi.interpolate`https://${storageAccount.name}.blob.core.windows.net/${myContainer.name}`;

// create an Azure sql server database
const database = new sql.Database("sqldatabase", {
    resourceGroupName: resourceGroup.name,
    serverName: sqlServer.name,
    sku: {
        name: "S0",
    },
    
}, {parent: sqlServer, dependsOn: sqlServer});

const serverVulnerabilityAssessment = new sql.ServerVulnerabilityAssessment(`${name}-servervulnerabilityassessment`, {
    recurringScans: {
        emailSubscriptionAdmins: true,
        emails: [
            "tushar@pulumi.com"
        ],
        isEnabled: true,
    },
    resourceGroupName: resourceGroup.name,
    serverName: sqlServer.name,
    storageAccountAccessKey: primaryStorageKey,
    storageContainerPath: storagecontainerpath,
    vulnerabilityAssessmentName: "default",
});

export const resourcegroup_name = resourceGroup.name;
export const storageaccount_name = storageAccount.name;
export const sql_user = username;
export const sql_password = sqlpassword.result;
export const sqlserver_name = sqlServer.name;
export const blob_container_name = myContainer.name;
//export const server_vulnerability_assessment_name = serverVulnerabilityAssessment.name