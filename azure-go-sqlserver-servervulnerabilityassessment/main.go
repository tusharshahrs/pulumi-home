package main

import (
	"github.com/pulumi/pulumi-azure-native/sdk/go/azure/resources"
	"github.com/pulumi/pulumi-azure-native/sdk/go/azure/sql"
	"github.com/pulumi/pulumi-azure-native/sdk/go/azure/storage"
	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		// Create an Azure Resource Group
		resourceGroup, err := resources.NewResourceGroup(ctx, "vulnerability-rg", nil)
		if err != nil {
			return err
		}

		// Create an Azure resource (Storage Account)
		storageAccount, err := storage.NewStorageAccount(ctx, "vulnstorageacct", &storage.StorageAccountArgs{
			ResourceGroupName: resourceGroup.Name,
			Sku: &storage.SkuArgs{
				Name: pulumi.String("Standard_LRS"),
			},
			Kind: pulumi.String("Storage"),
		})
		if err != nil {
			return err
		}

		// Export the primary key of the Storage Account
		//ctx.Export("primaryStorageKey", pulumi.All(resourceGroup.Name, storageAccount.Name).ApplyT(
		primaryStorageKey := pulumi.All(resourceGroup.Name, storageAccount.Name).ApplyT(
			func(args []interface{}) (string, error) {
				resourceGroupName := args[0].(string)
				accountName := args[1].(string)
				accountKeys, err := storage.ListStorageAccountKeys(ctx, &storage.ListStorageAccountKeysArgs{
					ResourceGroupName: resourceGroupName,
					AccountName:       accountName,
				})
				if err != nil {
					return "", err
				}

				return accountKeys.Keys[0].Value, nil
			}).(pulumi.StringOutput)

		if err != nil {
			return err
		}

		// create sql admin user
		username := "pulumiadmin"

		sqlpassword, err := random.NewRandomPassword(ctx, "loginpassword", &random.RandomPasswordArgs{
			Length:     pulumi.Int(14),
			MinLower:   pulumi.Int(4),
			MinUpper:   pulumi.Int(4),
			MinNumeric: pulumi.Int(4),
			Number:     pulumi.Bool(true),
			Special:    pulumi.Bool(false),
		})
		if err != nil {
			return err
		}

		// create an Azure sql server

		sqlServer, err := sql.NewServer(ctx, "vulnerability-sqlserver", &sql.ServerArgs{
			AdministratorLogin:         pulumi.String(username),
			AdministratorLoginPassword: sqlpassword.Result,
			ResourceGroupName:          resourceGroup.Name,
			Version:                    pulumi.String("12.0"),
		})
		if err != nil {
			return err
		}

		// create an Azure sql server database
		database, err := sql.NewDatabase(ctx, "vulnerability-sqldatabase", &sql.DatabaseArgs{
			ResourceGroupName: resourceGroup.Name,
			ServerName:        sqlServer.Name,
			Sku: &sql.SkuArgs{
				Name: pulumi.String("S0"),
			},
		})
		if err != nil {
			return err
		}

		myContainer, err := storage.NewBlobContainer(ctx, "vulnerabilityblobcontainer", &storage.BlobContainerArgs{
			AccountName:       storageAccount.Name,
			ResourceGroupName: resourceGroup.Name,
		})

		if err != nil {
			return err
		}

		storagecontainerpath := pulumi.Sprintf("https://%s.blob.core.windows.net/%s", storageAccount.Name, myContainer.Name)

		/*
			serverVulnerabilityAssessment, err := sql.NewServerVulnerabilityAssessment(ctx, "servervulnerabilityassessment", &sql.ServerVulnerabilityAssessmentArgs{
				RecurringScans:              &sql.VulnerabilityAssessmentRecurringScansPropertiesArgs{EmailSubscriptionAdmins: pulumi.Bool(true), Emails: pulumi.StringArray{pulumi.String("john.doe@something.net"), pulumi.String("jack.smith@mail.com")}, IsEnabled: pulumi.Bool(true)},
				ResourceGroupName:           resourceGroup.Name,
				ServerName:                  sqlServer.Name,
				StorageAccountAccessKey:     primaryStorageKey,
				StorageContainerPath:        storagecontainerpath,
				StorageContainerSasKey:      nil,
				VulnerabilityAssessmentName: pulumi.String("default"),
			})
			if err != nil {
				return err
			}
		*/

		// Outputs
		ctx.Export("resourcegroup_name", resourceGroup.Name)
		ctx.Export("storageaccount_name", storageAccount.Name)
		ctx.Export("sqladmin_user", pulumi.String(username))
		ctx.Export("sqladmin_password", sqlpassword.Result)
		ctx.Export("primarystoragekey", pulumi.ToSecret(primaryStorageKey))
		ctx.Export("sqlserver_name", sqlServer.Name)
		ctx.Export("sqlserver_database_name", database.Name)
		ctx.Export("blob_container_name", myContainer.Name)
		ctx.Export("storage_path_container", storagecontainerpath)
		//ctx.Export("server_vulnerability_assessment_name", serverVulnerabilityAssessment.Name)
		//ctx.Export("server_vulnerability_assessment_type", serverVulnerabilityAssessment.Type)

		return nil
	})

}
